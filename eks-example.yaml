AWSTemplateFormatVersion: 2010-09-09
Description: |
  EKS cluster (dedicated VPC: true, dedicated IAM: true) [created and managed by
  eksctl]  
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/ClusterSharedNodeSecurityGroup"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: a8e593a5-6cb5-489e-b3ac-d1ee6001c348
  ControlPlane:
      Type: 'AWS::EKS::Cluster'
      Properties:
        Name: test-eks
        ResourcesVpcConfig:
          SecurityGroupIds:
            - !Ref ControlPlaneSecurityGroup
          SubnetIds:
            - !Ref SubnetPublicUSEAST1C
            - !Ref SubnetPublicUSEAST1F
            - !Ref SubnetPrivateUSEAST1C
            - !Ref SubnetPrivateUSEAST1F
        RoleArn: !GetAtt 
          - ServiceRole
          - Arn
        Version: '1.18'
      Metadata:
        'AWS::CloudFormation::Designer':
          id: 39a70a9a-add5-4f8e-a235-275a575870c0
  ControlPlaneSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Communication between the control plane and worker nodegroups
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
        VpcId: !Ref VPC
      Metadata:
        'AWS::CloudFormation::Designer':
          id: 9cff25d7-ab77-4244-9fe4-244ac5276155
  IngressNodeToDefaultClusterSG:
      Type: 'AWS::EC2::SecurityGroupIngress'
      Properties:
        Description: Allow unmanaged nodes to communicate with control plane (all ports)
        FromPort: 0
        GroupId: !GetAtt 
          - ControlPlane
          - ClusterSecurityGroupId
        IpProtocol: '-1'
        SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
        ToPort: 65535
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 80cc7b53-75e6-497b-82ac-fd81f15fdd27
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NATIP
        - AllocationId
      SubnetId: !Ref SubnetPublicUSEAST1C
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f50c3c28-794d-4bc1-bd2b-305284a61278
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATIP'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 162ad434-deb2-457d-8435-dd84f149aac6
  NATPrivateSubnetRouteUSEAST1C:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableUSEAST1C
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 51c7dd42-a0c4-41cb-9b8e-247bd9624754
  NATPrivateSubnetRouteUSEAST1F:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableUSEAST1F
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d52eaadd-722f-4586-a8ca-1ceb978e6899
  PrivateRouteTableUSEAST1C:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/PrivateRouteTableUSEAST1C"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 9a55b113-7345-4ef4-9eeb-9a5fa28d3192
  PrivateRouteTableUSEAST1F:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/PrivateRouteTableUSEAST1F"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 2d6910a8-5cfe-4e31-b265-133128388946
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/PublicRouteTable"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: e887b54a-f6e2-4a21-a65c-030a6792d34f
  PublicSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
    Metadata:
      "AWS::CloudFormation::Designer":
        id: b78f9575-b710-471e-b6cd-488aa76e3de6
  RouteTableAssociationPrivateUSEAST1C:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableUSEAST1C
      SubnetId: !Ref SubnetPrivateUSEAST1C
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 0c775112-c715-4763-97f8-3a7574f99907
  RouteTableAssociationPrivateUSEAST1F:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableUSEAST1F
      SubnetId: !Ref SubnetPrivateUSEAST1F
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 3c9c7ad5-8da5-4cc3-9ba3-a201aaadde59
  RouteTableAssociationPublicUSEAST1C:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSEAST1C
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 67137cf7-4a30-49b5-aa9e-15483bc8132a
  RouteTableAssociationPublicUSEAST1F:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSEAST1F
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 49bf1b20-7394-4627-aa8b-7945538d0634
  ServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref "AWS::Partition"
                  - EKS
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref "AWS::Partition"
                  - EKSFargatePods
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/ServiceRole"
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 82f2062d-b605-4d4c-a210-75dd433e2fa3
  SubnetPrivateUSEAST1C:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 192.168.64.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: !Sub "${AWS::StackName}/SubnetPrivateUSEAST1C"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: a10d1aa6-5d56-457a-a616-26166840b8a1
  SubnetPrivateUSEAST1F:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1f
      CidrBlock: 192.168.96.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: Name
          Value: !Sub "${AWS::StackName}/SubnetPrivateUSEAST1F"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: afa1057a-b316-4196-a399-de83fa96a523
  SubnetPublicUSEAST1C:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 192.168.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: !Sub "${AWS::StackName}/SubnetPublicUSEAST1C"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: c7534931-c1b4-4fac-8d8e-68041b9d7ac8
  SubnetPublicUSEAST1F:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1f
      CidrBlock: 192.168.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: Name
          Value: !Sub "${AWS::StackName}/SubnetPublicUSEAST1F"
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: c23327fc-a985-4ef2-b691-5a0b3952b9dd
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/VPC"
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 4eed7bb4-7f82-4b42-9dec-a6dff37c0cf2
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Metadata:
      "AWS::CloudFormation::Designer":
        id: c9a4f879-0bbd-4bce-91a7-cefe14266a86
    
    
