
### Parameters ###

Parameters:

# VPC CIDR
  VpcCidr:
    Description: VPC CIDR BLOCK
    Type: String
    Default: "10.0.0.0/16"

  PubSubnet1Cidr:
    Description: PUBLIC SUBNET1 CIDR
    Type: String
    Default: "10.0.0.0/24"

### Resources ###

Resources:

  ### Network Resources ###
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true

  SubnetPublic1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PubSubnet1Cidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  SubnetPublic2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  
  PublicSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    
  
  RouteTableAssociationPublic1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic1
  
  RouteTableAssociationPublic2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic2


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: keyname
          Value: Internet
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  

  
  # ControlPlane:
  #     Type: 'AWS::EKS::Cluster'
  #     Properties:
  #       ResourcesVpcConfig:
  #         SecurityGroupIds:
  #           - !Ref ControlPlaneSecurityGroup
  #         SubnetIds:
  #           - !Ref SubnetPublic1
  #           - !Ref SubnetPublic2
  #       RoleArn: !GetAtt 
  #         - eksClusterRole
  #         - Arn
  #       Version: '1.18'

  # ClusterSharedNodeSecurityGroup:
  #   Type: "AWS::EC2::SecurityGroup"
  #   Properties:
  #     GroupDescription: Communication between all nodes in the cluster
  #     VpcId: !Ref VPC
  
  # ControlPlaneSecurityGroup:
  #     Type: 'AWS::EC2::SecurityGroup'
  #     Properties:
  #       GroupDescription: Communication between the control plane and worker nodegroups
  #       VpcId: !Ref VPC
  
  # IngressNodeToDefaultClusterSG:
  #     Type: 'AWS::EC2::SecurityGroupIngress'
  #     Properties:
  #       Description: Allow unmanaged nodes to communicate with control plane (all ports)
  #       FromPort: 0
  #       GroupId: !GetAtt 
  #         - ControlPlane
  #         - ClusterSecurityGroupId
  #       IpProtocol: '-1'
  #       SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
  #       ToPort: 65535
        
  # ### IAM Resources ###
  
  # eksClusterRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - eks.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy