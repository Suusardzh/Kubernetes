AWSTemplateFormatVersion: 2010-09-09
Description: |
  EKS cluster  

### Parameters ### 

Parameters:
  VpcCidrBlock:
    Description: Enter CidrBlock 
    Type: String
    Default: ''
  SubnetName1:
    Description: Enter SubnetName1
    Type: String
    Default: ''
  SubnetCidrBlock:
    Description: Enter CidrBlock 
    Type: String
    Default: ''
  SubnetName2:
    Description: Enter SubnetName2
    Type: String
    Default: ''
  SubnetCidrBlock:
    Description: Enter CidrBlock 
    Type: String
    Default: ''
  AvailabilityZone:
    Description: Enter AZ
    Type: String
    Default: ''
  ControlPlaneName:
    Description: Enter name
    Type: String
    Default: ''

### Resources ####    

Resources:

  ### Network Resources ###
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: ''
      EnableDnsSupport: true

  SubnetPublic1:
    Type: "AWS::EC2::Subnet"
    Properties:
      Name: !Ref SubnetName1
      AvailabilityZone: ''
      CidrBlock: ''
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  SubnetPublic2:
    Type: "AWS::EC2::Subnet"
    Properties:
      Name: !Ref  SubnetName2
      AvailabilityZone: ''
      CidrBlock: ''
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  
  PublicSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    
  
  RouteTableAssociationPublic1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic1
  
  RouteTableAssociationPublic2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic2


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: keyname
          Value: Internet
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  

  
  ControlPlane:
      Type: 'AWS::EKS::Cluster'
      Properties:
        Name: !Ref ControlPlaneName
        ResourcesVpcConfig:
          SecurityGroupIds:
            - !Ref ControlPlaneSecurityGroup
          SubnetIds:
            - !Ref SubnetPublic1
            - !Ref SubnetPublic2
        RoleArn: !GetAtt 
          - eksClusterRole
          - arn 
        Version: '1.18'

  ClusterSharedNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      VpcId: !Ref VPC
  
  ControlPlaneSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Communication between the control plane and worker nodegroups
        VpcId: !Ref VPC
  
  IngressNodeToDefaultClusterSG:
      Type: 'AWS::EC2::SecurityGroupIngress'
      Properties:
        Description: Allow unmanaged nodes to communicate with control plane (all ports)
        FromPort: 0
        GroupId: !GetAtt 
          - ControlPlane
          - ClusterSecurityGroupId
        IpProtocol: '-1'
        SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
        ToPort: 65535
        
  ### IAM Resources ###
  
  eksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
    
  

